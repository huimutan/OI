/*1138 - 【基础】求无暇素数
题目描述
一个两位整数A本身是素数，若将其个位数字与十位数字交换，
得到一个新的两位数B，而B也是素数，我们则称A为无暇素数。
例如：31是素数，个位数字与十位数字交换后得到13，也是素数。
所以31是无暇素数。
问题： 给出一个数字字符串（即字串中的字符全部由数字组成），
求出其所有组成的无暇素数。

输入
一个数字字符串（长度<＝20），以"%"结束。

输出
全部的无暇素数，之间用一个逗号隔开。

样例
输入
321314%
输出
13,31
来源
函数问题

标签
函数问题
*/
#include <bits/stdc++.h>
using namespace std;
//题目有些地方没有交代清楚
//应该是从字符串中取连续的两个字符，判断是否是无暇素数，
//若是无暇素数A，只打印这个两位数本身A，不要打印它对应的素数B。题目样例容易误解。
//比如3213417%  输出13,17
bool prime(int n) {
  for (int i = 2; i * i < n; i++) {
    if (n % i == 0 || n == 1) return 0;
  }
  return 1;
}

int main() {
  char s[30];
  cin >> s;
  int l = strlen(s);
  int k = 0;
  for (int i = 0; i < l - 3; i++) {
    int a = (s[i] - '0') * 10 + s[i + 1] - '0';
    int b = (s[i + 1] - '0') * 10 + s[i] - '0';
    if (prime(a) && prime(b)) {
      if (k == 0)
        cout << a;
      else
        cout << "," << a;
      k++;
    }
  }
  return 0;
}