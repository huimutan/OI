/*1233 - 【入门】求中位数
题目描述
中位数指的是一组数，如果按照大小排序排好后最中间的那个数的值，如果有偶数个元素，那么就是最中间两个数的平均数！
比如：2 5 8 1 6，排序后的结果为1 2 5 6 8，那么这组数的中位数就是5！
再比如：8 9 1 2 3 0，排序后的结果为0 1 2 3 8
9，那么这组书的中位数就是(2+3)/2=2.5

输入
第一行：一个整数n代表有n个数（n≤100）
第二行：n个数的值
输出
中位数（结果保留1位小数）

样例
输入
5
2 5 8 1 6
输出
5.0
*/

// n= 5
//下标：0 1 2 3 4,中位数下标：n / 2
// n=6
//下标：0 1 2 3 4 5,中位数下标：n/2 - 1, n / 2

#include <bits/stdc++.h>
using namespace std;
int main() {
  //思路：先对数组元素排序，然后判断奇偶，找出中位数
  int n, a[1000], i, j, t;
  double v;  //存放中位数
  cin >> n;
  for (i = 0; i < n; i++) {
    cin >> a[i];
  }
  //对数组元素按照由小到大进行排序
  for (i = 1; i < n; i++) {  // i代表排序的轮数
    //第i轮从下标为0的数，排序到下标为n-i (循环到n-i-1)
    for (j = 0; j <= n - i - 1; j++) {
      if (a[j] > a[j + 1]) {
        // t = a[j];
        // a[j] = a[j + 1];
        // a[j + 1] = t;
        swap(a[j], a[j + 1]);
      }
    }
  }
  // for(i = 0;i <n;i++){
  // cout<<a[i]<<M
  // }
  //得到中位数
  if (n % 2 != 0) {
    v = a[n / 2];
  } else {
    v = (a[n / 2] + a[n / 2 - 1]) / 2.0;
  }
  cout << fixed << setprecision(1) << v << endl;
  return 0;
}
