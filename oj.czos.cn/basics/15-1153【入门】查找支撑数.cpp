/*1153 - 【入门】查找“支撑数”
题目描述
在已知一组整数中，有这样一种数非常怪，它们不在第一个，也不在最后一个，而且刚好都比左边和右边相邻的数大，你能找到它们吗？

输入
第一行为整数m，表示输入的整数个数。（ 3<= m <=100 ) 第二行为m个整数。

输出
若干个支撑数，每行一个。

样例
输入
14
1 3 2 4 1 5 3 9 7 10 8 23 85 43
输出
3
4
5
9
10
85
来源
数组问题
*/
#include <bits/stdc++.h>
using namespace std;
int main() {
  /*  它们不在第一个，也不在最后一个，而且刚好都比左边和右边相邻的数大*/
  int a[100], n, i;
  cin >> n;                  //读入数组中实际元素的个数
  for (i = 0; i < n; i++) {  //读入数组中的元素
    cin >> a[i];
  }
  for (i = 1; i <= n - 2; i++) {  //寻找支撑数
    if (a[i] > a[i - 1] &&
        a[i] > a[i + 1]) {  //如果当前数比左右都大，就是支撑数
      cout << a[i] << endl;
    }
  }

  /*   for (i = 0; i < n; i++) {
      cin >> a[i];
      if (i > 1 && a[i - 1] > a[i - 2] &&
          a[i - 1] > a[i]) {  //如果当前数比左右都大，就是支撑数
        cout << a[i - 1] << endl;
      }
    } */

  return 0;
}
