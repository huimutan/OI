/*1269 - 【基础】高精度减法
题目描述
高精度减法，求a-b。a,b都是不超过240位的非负整数。

输入
两个非负整数，每行一个。

输出
一个整数，代表两个整数相减之后的结果。

样例
输入
33333333333333333333333333333333333333333
22222222222222222222222222222222222222222
输出
11111111111111111111111111111111111111111
来源
高精度算法

标签
高精度算法
*/
#include <bits/stdc++.h>
using namespace std;
/*
高精度减法：
第一步：判断正负， 如果s1比s2对应的整数小，结果为负， 交换s1 s2
第二步：将两个字符串，逆序存入2 个整数输出测试
第三步：从左至右，逐位相减，不够借位
第四步：从右向左，逆序输出
*/
string s1, s2;
int a[250], b[250], c[250];
int i, len, p;
char f = '+';  //表示结果的正负
int main() {
  cin >> s1 >> s2;
  //长的一定大,一样长的字典码大的一定大
  //"123" "3" "123" "125"
  if (s1.size() < s2.size() || (s1.size() == s2.size() && s1 < s2)) {
    f = '-';
    swap(s1, s2);  //直接交换两个变量的值
  }
  // cout<<f<<""<<s1<<""<<s2;
  //将s1和s2逆序存入整数数组
  for (i = 0; i < s1.size(); i++) {
    // 0 -> s1[s1.size()-1]
    // 1 -> s1[s1.size()-2]
    a[i] = s1[s1.size() - i - 1] - '0';
  }
  for (i = 0; i < s2.size(); i++) {
    b[i] = s2[s2.size() - i - 1] - '0';
  }
  //逐位相减
  len = s1.size();
  for (i = 0; i < len; i++) {
    //如果不够减,向右借1,当10用
    if (a[i] < b[i]) {
      a[i + 1] --;
      a[i] += 10;
    }
    c[i] = a[i] - b[i];
  }
  //判断是否要输出负号
  if (f == '-') cout << f;
  //从右向左逐位输出，从第一个遇到的非 0元素开始输出
  for (i = len - 1; i >= 0; i--) {
    if (c[i] != 0) {
      p = i;
      break;
    }
  }
  //逆序从第一个非 0元素 输出每一位
  for (i = p; i >= 0; i--) {
    cout << c[i];
  }
}