/*1287 - 【基础】高精度乘
题目描述
高精度乘，求两个很大的非负整数相乘的结果。

输入
2个非负整数，每个一行，每个整数不超过240位。

输出
一个整数，表示相乘的结果。

样例
输入
1111111111111111111111111
2222222222222222222222222
输出
2469135802469135802469135308641975308641975308642
来源
高精度算法

标签
高精度算法
*/
#include <bits/stdc++.h>
using namespace std;
string s1, s2;
int a[250], b[250], c[500];
int i, j, p;
int main() {
  cin >> s1 >> s2;
  //逆序将s1和s2存入ab数组
  for (i = 0; i < s1.size(); i++) {
    a[i] = s1[s1.size() - i - 1] - '0';
  }

  for (i = 0; i < s2.size(); i++) {
    b[i] = s2[s2.size() - i - 1] - '0';
  }
  //循环a数组的每一位,用 a[i]去乘以b数组的每一位b[j]
  //结果错位加到c数组的c[i+j]这一位上
  for (i = 0; i < s1.size(); i++) {
    for (j = 0; j < s2.size(); j++) {
      c[i + j] += a[i] * b[j];
      //进位
      if (c[i + j] >= 10) {
        c[i + j + 1] += c[i + j] / 10;
        c[i + j] %= 10;
      }
    }
  }
  //逆序输出，逆序从第一个非 0 元素位置开始输出
  for (i = s1.size() + s2.size() - 1; i >= 0; i--) {
    if (c[i] != 0) {
      p = i;
      break;
    }
  }
  for (i = p; i >= 0; i--) {
    cout << c[i];
  }
}