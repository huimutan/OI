/*1268 - 【基础】高精度加法
题目描述
计算a+b的值，a,b皆为不超过240位的正整数。

输入
两个正整数，每行一个

输出
一个数，代表两个整数的和

样例
输入
111111111111111111111111111111111111
222222222222222222222222222222222222
输出
333333333333333333333333333333333333
来源
高精度算法

标签
高精度算法
*/
/* s1="968"
s1[O]->a[s1.size()-1]
s1[1]->a[s1.size()-2]
s1[i]->a[s1.size()-i-1] */

#include <bits/stdc++.h>
using namespace std;
/*
第一步：用string读入高精度整数
第二步：将两个高精度整数逆序存入 ab两个整数数组
第三步：从左向右，逐位求和， 结果存入c数组
从左向右，逐位进位
第四步：逆序输出结果
*/
string s1, s2;  //高精度整数
int a[250], b[250], c[500];
int i, j, len;
int main() {
  cin >> s1 >> s2;
  //第二步:将两个高精度整数逆序存入 ab 两个整数数组
  for (i = 0; i < s1.size(); i++) {
    a[s1.size() - i - 1] = s1[i] - '0';
  }
  for (i = 0; i < s2.size(); i++) {
    b[s2.size() - i - 1] = s2[i] - '0';
  }
  //第三步:从左向右,逐位求和,结果存入c数组
  //从左向右,逐位进位
  //加法的次数, 取决于两个整数的较长的字符串
  len = s1.size();
  if (s2.size() > s1.size()) {
    len = s2.size();
  }
  //逐位相加
  for (i = 0; i < len; i++) {
    c[i] = a[i] + b[i];
  }
  //逐位进位
  for (i = 0; i < len; i++) {
    if (c[i] >= 10) {
      c[i + 1] = c[i + 1] + c[i] / 10;
      c[i] = c[i] % 10;
    }
  }
  //第四步:逆序输出结果
  //两个不超过1en位的整数做加法,结果可能是 len+1位
  if (c[len] != 0) {
    len++;
  }
  //逆序输出结果
  for (i = len - 1; i >= 0; i--) {
    cout << c[i];
  }
}