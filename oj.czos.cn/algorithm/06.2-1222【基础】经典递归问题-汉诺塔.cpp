/*1222 - 【基础】经典递归问题――汉诺塔
题目描述
汉诺塔（又称河内塔）问题是印度的一个古老的传说。开天辟地的神勃拉玛在一个庙里留下了三根金刚石的棒，第一根上面套着64个圆的金片，最大的一个在底下，其余一个比一个小，依次叠上去，庙里的众僧不倦地把它们一个个地从这根棒搬到另一根棒上，规定可利用中间的一根棒作为帮助，但每次只能搬一个，而且大的不能放在小的上面。面对庞大的数字(移动圆片的次数)18446744073709551615，看来，众僧们耗尽毕生精力也不可能完成金片的移动。



后来，这个传说就演变为汉诺塔游戏:
1.有三根杆子A,B,C。A杆上有若干碟子
2.每次移动一块碟子,小的只能叠在大的上面
3.把所有碟子从A杆全部移到C杆上
经过研究发现，汉诺塔的破解很简单，就是按照移动规则向一个方向移动金片：
如3阶汉诺塔的移动：A→C,A→B,C→B,A→C,B→A,B→C,A→C
　　此外，汉诺塔问题也是程序设计中的经典递归问题。
算法思路： 1.如果只有一个金片，则把该金片从源移动到目标棒，结束。
2.如果有n个金片，则把前n-1个金片移动到辅助的棒，然后把自己移动到目标棒，最后再把前n-1个移动到目标棒。

输入
一个整数N，表示A柱上有N个碟子。（0<n<=10）

输出
若干行，即移动的最少步骤

样例
输入
3
输出
A To C
A To B
C To B
A To C
B To A
B To C
A To C
来源
递归

标签
递归
*/
#include <bits/stdc++.h>
using namespace std;
/*
移动的过程：
1、先将n-1 个金片(n 个金片除了最下面一个以外的金片)
从A位置，借助C位置，移动到B位置， 需要fun(n-1)步
2、将A位置的最下方的一个金片， 直接移动到C位置，需要1步
3、将 B 位置的 n-1 个金片， 从B位置借助A位置移动到C位置
需要 fun(n-1)步
因此得到结论如下：fun(n)= fun(n-1) * 2+1
*|
|*
函数的作用：将n个金片从 p1 位置， 借助 p2 位置，移动到 p3 位置
p1:源位置（金片所在的源位置）
p2:辅助位置（移动的过程中要借助的位置）
p3 : 目标位置（移动到的位置）
*/
void move(int n, char p1, char p2, char p3) {
  //递归的出口：只要有金片就要递归， 没有金片递归停止
  if (n > 0) {
    //第 1 步：将n-1个金片，从p1位置， 借助 p3 位置，移动到 p2 位置
    move(n - 1, p1, p3, p2);
    //第 2 步： 将p1位置的第n个金片直接移动到 p3位置
    cout << p1 << " To " << p3 << endl;
    //第 3 步：将 p2 位置的 n-1 个金片， 借助于 p1 位置，移动到 p3 位置
    move(n - 1, p2, p1, p3);
  }
}
int main() {
  int n;
  cin >> n;
  //递归调用，打印移动的步骤
  move(n, 'A', 'B', 'C');
  return 0;
}