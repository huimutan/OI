/*1216 - 【基础】数塔问题
题目描述
有如下所示的数塔，要求从底层走到顶层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？

输入
输入数据首先包括一个整数整数N(1 <= N <=
100)，表示数塔的高度，接下来用N行数字表示数塔，其中第i行有个i个整数，且所有的整数均在区间[0,99]内。

输出
从底层走到顶层经过的数字的最大和是多少？

样例
输入
5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5
输出
30
来源
递推 动态规划

标签
递推动态规划
*/
#include <bits/stdc++.h>
using namespace std;
int a[110][110];  //存储数塔
int i, j, n;
int main() {
  cin >> n;
  //读入第i 层的i 个数
  for (i = 1; i <= n; i++) {
    for (j = 1; j <= i; j++) {
      cin >> a[i][j];
    }
  }
  //从倒数第 2 层开始逆推， 每个点累加上下方的值和 下方右边的值中的较大数
  for (i = n - 1; i >= 1; i--) {
    for (j = 1; j <= i; j++) {
      // if (a[i + 1][j] > a[i + 1]) {
      // a[i][j] = a[i][j] + a[i+1][j];
      //} else {
      // a[i][j] = a[i] + a[i + 1];
      //  }
      a[i][j] = a[i][j] + max(a[i + 1][j], a[i + 1][j + 1]);
    }
  }
  cout << a[1][1];
}