/*1372 - 【基础】活动选择
题目描述
学校在最近几天有n（n<=100）个活动，这些活动都需要使用学校的大礼堂，在同一时间，礼堂只能被一个活动使。由于有些活动时间上有冲突，学校办公室人员只好让一些活动放弃使用礼堂而使用其他教室。

现在给出n个活动使用礼堂的起始时间begini和结束时间endi(begini <
endi)，请你帮助办公室人员安排一些活动来使用礼堂，要求安排的活动尽量多。请问最多可以安排多少活动？

请注意，开始时间和结束时间均指的是某个小时的0分0秒，如：3
5，指的是3:00~5:00，因此3 5和5 9这两个时间段不算冲突的时间段。

输入
第一行一个整数n(n<=100)

接下来的n行，每行两个整数，第一个begini，第二个是endi(begini< endi  <=32767)

输出
输出最多能安排的活动数

样例
输入
11
3 5
1 4
12 14
8 12
0 6
8 11
6 10
5 7
3 8
5 9
2 13
输出
4
来源
贪心 结构体

标签
贪心结构体区间问题
*/
#include <bits/stdc++.h>
using namespace std;
/*
要求安排的活动尽量多。请问最多可以安排多少活动
安排活动的策略：尽可能选择结束时间早的活动
第一步：将结束时间，按照升序排序，开始时间要做联动排序
第二步：选择第一个活动的结束end时间为依据，向下找到第一个开始时间>=end
的活动为第2个活动，以此类推
*/
int b[110], e[110];
// c:计数器，计算最多能够排多少个活动
int n, i, j, c;
int main() {
  cin >> n;
  //读入n个活动
  for (i = 1; i <= n; i++) {
    cin >> b[i] >> e[i];
  }
  // 对n个活动的起止时间，按照结束时间升序排序
  for (i = 1; i <= n - 1; i++) {
    //第i轮，从下标为1的数，排到下标为n-i
    for (j = 1; j <= n - i; j++) {
      if (e[j] > e[j + 1]) {
        swap(e[j], e[j + 1]);
        swap(b[j], b[j + 1]);
      }
    }
  }
  // for (i = 1ji < nji++) {
  // cout << b[i] << "" << e[i] << endl;
  //  }
  int end = e[1];  //第一个活动一定会选到
  c = 1;
  for (i = 2; i <= n; i++) {
    //找到b[i]>=end的活动，选择它
    if (b[i] >= end) {
      c++;
      end = e[i];
    }
  }
  cout << c;
}