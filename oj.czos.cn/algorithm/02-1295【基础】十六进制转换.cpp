/*1295 - 【基础】十六进制转换
题目描述
输入一个不超过100000位的十六进制数，请转换成八进制数。
注：十六进制数中，字母0-9还对应表示数字0-9，
字母“A”（大写）表示10，“B”表示11，…，“F”表示15。比如：十六进制A10B表示的10进制数是：
10*16^3+1*16^2+0*16^1+11*16^0=41227。
转换成八进制数是：120413，因为1*8^5+2*8^4+0*8^3+4*8^2+1*8^1+3*8^0=41227。

输入
一个十六进制数，没有前导0。
输出
一个八进制数，没有前导0。

样例
输入
123ABC
输出
4435274
来源
进制转换

标签
进制转换
*/
#include <bits/stdc++.h>
using namespace std;
// a数组存储：1位16进制数对应4位2进制数<br />
string a[] = {"0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111",
              "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"};
int main() {
  string s, r = "", x;
  cin >> s;
  //十六进制 -> 二进制
  int i, t;
  for (i = 0; i < s.size(); i++) {
    if (s[i] >= 'A' && s[i] <= 'F') {
      t = s[i] - 'A' + 10;
    } else {
      t = s[i] - '0';
    }
    r += a[t];  // t是对应的下标
  }
  while (r[0] == '0') r.erase(0, 1);  //将前导0去掉
  //二进制数r -> 八进制<br />
  while (r.size() % 3 != 0) {  //前导补0 3位二进制数为1组
    r = '0' + r;
  }
  for (i = 0; i < r.size(); i = i + 3) {
    cout << (r[i] - '0') * 4 + (r[i + 1] - '0') * 2 + (r[i + 2] - '0') * 1;
  }
  return 0;
}
