   // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "(lldb) 启动",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}/${fileBasenameNoExtension}.out",//"${file}.out";"${workspaceFolder}/a.out"
            "args": [],
            "stopAtEntry": true,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": true,
            "MIMode": "lldb"
            //"preLaunchTask": "c++"//"c++"
        },
        {
            "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示 //"name": "(Windows) Launch",
            "type": "cppdbg", // 配置类型，这里只能为cppdbg //"type": "cppvsdbg",
            "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加）
            "program": "${file}.exe", // 将要进行调试的程序的路径,"program": "${fileDirname}/${fileBasenameNoExtension}.exe",
            "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可
            "stopAtEntry": true, // 设为true时程序将暂停在程序入口处，我一般设置为true
            "cwd": "${workspaceRoot}", // 调试程序时的工作目录,代码所在路径workspaceRoot。"cwd": "${workspaceFolder}",
            "environment": [], // （环境变量？）
            "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台
            "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？
            "MIMode": "gdb", // 指定连接的调试器，可以为gdb或lldb。但目前lldb在windows下没有预编译好的版本。
            "miDebuggerPath": "D:/02Run/DevCPP/MinGW32/bin/gdb.exe", // 调试器路径。
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": false
                }
            ],
            "preLaunchTask": "Compile" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应
        }
    ]
}