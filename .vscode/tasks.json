// https://code.visualstudio.com/docs/editor/tasks
{
    "version": "2.0.0",
    "tasks": [
        // {
        //     "label": "CompileMac",
        //     "type": "process",
        //     "command": "g++",
        //     "args": [
        //         "${file}",
        //         "-o",
        //         "${fileDirname}/${fileBasenameNoExtension}.out",
        //         "-g",
        //         "-Wall" // 开启额外警告
        //     ],
        //     "group": {
        //         "kind": "build",
        //         "isDefault": true
        //     }
        // },
        {
            "label": "Compile",
            "type": "process",// process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
            "command": "g++", // 要使用的编译器，C++用clang++；如果编译失败，改成gcc或g++试试，还有问题那就是你自己的代码有错误
            "args": [
                "${file}",//输入文件
                "-o", // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
                "${fileDirname}/${fileBasenameNoExtension}.exe",
                "-g", // 生成和调试有关的信息
                "-Wall", // 开启额外警告
                //"-static-libgcc" // 静态链接libgcc，一般都会加上
                //"--target=x86_64-w64-mingw", // clang的默认target为msvc，不加这一条就会找不到头文件；用gcc或者Linux则掉这一条
                //"-std=c17" // C++最新标准为c++17，或根据自己的需要进行修改
            ],
            "group": {
                "kind": "build",
                "isDefault": true// 不为true时ctrl shift B就要手动选择了
            }
            // "presentation": {
            //     "echo": true,
            //     "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
            //     "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
            //     "panel": "shared" // 不同的文件的编译信息共享一个终端面板
            // }
        }
        
    ]
}